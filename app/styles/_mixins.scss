$allSides: ('top', 'right', 'bottom', 'left');

//HELPER FUNCTIONS USED IN THIS FILE ONLY

@mixin maybeInclude($value) {
  @if ($value != false and $value != null and $value != "" and length($value) > 0) {
    @content;
  }
}

@mixin maybeSet($cssStyleName, $value) {
  @include maybeInclude($value) {
    #{$cssStyleName}: $value;
  }
}


// ACTUAL MIXINS FOR USE ACROSS STYLES

@mixin icon(){
	display: inline-block;
	font-family: "Ionicons";
	speak: none;
	font-style: normal;
	font-weight: normal;
	font-variant: normal;
	text-transform: none;
	text-rendering: auto;
	line-height: 1;
	-webkit-font-smoothing: antialiased;
}

@mixin set-position($top: null, $right: null, $bottom: null, $left: null, $position: absolute) {
  position: $position;
  $vals: $top, $right, $bottom, $left;
  @for $i from 1 through 4 {
    $val: nth($vals, $i);
    @include maybeInclude($val) {
      #{nth($allSides, $i)}: $val;
    }
  }
}

@mixin flex-centering(){
	@include display(flex);
	@include justify-content(center);
	@include align-items(center);
	text-align: center;
}

@mixin create-circle($radius: null, $absoluteCenter: false){
	@if ($absoluteCenter){
		@include set-position( calc(50% - #{$radius}), null, null, calc(50% - #{$radius}));
	}

	border-radius: 50%;
	width: $radius * 2;
	height: $radius * 2;
}

@mixin create-orbit-circle-classes($radius0: $primaryCircleRadius, $radius1: $orbitCircleRadius){

	$longSideOfTriangle: $radius0 + $radius1 + $paddingPrimaryOrbit;
	$shortSideOfTriangle: $radius1 + $paddingOrbitOrbit + $radius1;
	
	$translateX: #{$longSideOfTriangle}px;
	$degreeUnit: getIsocelesAngle($shortSideOfTriangle, $longSideOfTriangle);

	@for $i from 1 through 16 {
		.contains-#{$i}-orbit-circles {
			@for $j from 1 through 16 {
				.orbit-circle:nth-child(#{$j}){
					$startingRotation: 90 - (($i - 1) * ($degreeUnit/2) );

					$rotation: $startingRotation + (($j - 1) * $degreeUnit);
					@include transform(rotate( #{$rotation}deg ) translate3d(-$translateX, 0, 0) );

					.orbit-circle-rotate-correction{
						//have to do this because SCSS interpolation doesn't handle negatives well
						@if ($rotation < 0){
							$rotation: $rotation * -1;
							@include transform( rotate( #{$rotation}deg ));
						} @else {
							@include transform( rotate( -#{$rotation}deg ));							
						}
					}
				}
			}
		}
	}
}